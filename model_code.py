# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wURaG7Gx80aBa2NbTlH-I3j3-RmHmEAV
"""

import pandas as pd
data = pd.read_csv('train.tsv' , sep= '\t')  
print(data.head())
print(data.info())
print(data['label'].value_counts())  

print(data['label'].value_counts())


data.dropna(subset=['title', 'text', 'label'], inplace=True)

from textblob import TextBlob


data['title_length'] = data['title'].apply(lambda x: len(x.split()))


data['text_length'] = data['text'].apply(lambda x: len(x.split()))


keywords = ['important', 'keyword1', 'keyword2'] 
data['keyword_density'] = data['text'].apply(
    lambda x: sum(x.count(keyword) for keyword in keywords) / len(x.split())
)


data['sentiment_polarity'] = data['text'].apply(lambda x: TextBlob(x).sentiment.polarity)
data['sentiment_subjectivity'] = data['text'].apply(lambda x: TextBlob(x).sentiment.subjectivity)


data['date'] = pd.to_datetime(data['date'], format='%b %d, %Y', errors='coerce')  
data['year'] = data['date'].dt.year
data['month'] = data['date'].dt.month
data['day_of_week'] = data['date'].dt.dayofweek

from sklearn.model_selection import train_test_split


X = data.drop(columns=['label', 'date'])  
y = data['label'] 


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.feature_extraction.text import TfidfVectorizer
from scipy.sparse import hstack


tfidf_title = TfidfVectorizer(max_features=1000)
tfidf_text = TfidfVectorizer(max_features=5000)


X_train_title = tfidf_title.fit_transform(X_train['title'])
X_train_text = tfidf_text.fit_transform(X_train['text'])
X_test_title = tfidf_title.transform(X_test['title'])
X_test_text = tfidf_text.transform(X_test['text'])


num_features = ['title_length', 'text_length', 'keyword_density', 'sentiment_polarity', 'sentiment_subjectivity']
X_train_combined = hstack([X_train_title, X_train_text, X_train[num_features]])
X_test_combined = hstack([X_test_title, X_test_text, X_test[num_features]])

from sklearn.ensemble import RandomForestClassifier


model = RandomForestClassifier(random_state=42)
model.fit(X_train_combined, y_train)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score


y_pred = model.predict(X_test_combined)
y_prob = model.predict_proba(X_test_combined)[:, 1]  

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='weighted'))
print("Recall:", recall_score(y_test, y_pred, average='weighted'))
print("F1 Score:", f1_score(y_test, y_pred, average='weighted'))
print("AUC-ROC:", roc_auc_score(y_test, y_prob))

import joblib

# Save the trained model and vectorizers
joblib.dump(model, 'classification_model.pkl')  # Trained model
joblib.dump(tfidf_title, 'tfidf_title.pkl')     # Title TF-IDF vectorizer
joblib.dump(tfidf_text, 'tfidf_text.pkl')       # Text TF-IDF vectorizer

def predict_label(title, text, keyword_density=0, sentiment_polarity=0, sentiment_subjectivity=0):
    import joblib
    import numpy as np
    from scipy.sparse import hstack

    # Load saved components
    model = joblib.load('classification_model.pkl')
    tfidf_title = joblib.load('tfidf_title.pkl')
    tfidf_text = joblib.load('tfidf_text.pkl')

    # Compute numerical features
    title_length = len(title.split())
    text_length = len(text.split())

    # Transform input text using TF-IDF vectorizers
    title_vector = tfidf_title.transform([title])
    text_vector = tfidf_text.transform([text])

    # Combine features
    numerical_features = np.array([[title_length, text_length, keyword_density, sentiment_polarity, sentiment_subjectivity]])
    combined_features = hstack([title_vector, text_vector, numerical_features])

    # Predict label
    prediction = model.predict(combined_features)
    return prediction[0]




from google.colab import files

# Download a single file
files.download('classification_model.pkl')  # Replace with your file name
files.download('tfidf_text.pkl')
files.download('tfidf_title.pkl')